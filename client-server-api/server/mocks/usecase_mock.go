// Code generated by MockGen. DO NOT EDIT.
// Source: quotes/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=quotes/usecase/usecase.go -destination=./mocks/usecase_mock.go -package=mocks GetterDollarQuote
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetterDollarQuote is a mock of GetterDollarQuote interface.
type MockGetterDollarQuote struct {
	ctrl     *gomock.Controller
	recorder *MockGetterDollarQuoteMockRecorder
	isgomock struct{}
}

// MockGetterDollarQuoteMockRecorder is the mock recorder for MockGetterDollarQuote.
type MockGetterDollarQuoteMockRecorder struct {
	mock *MockGetterDollarQuote
}

// NewMockGetterDollarQuote creates a new mock instance.
func NewMockGetterDollarQuote(ctrl *gomock.Controller) *MockGetterDollarQuote {
	mock := &MockGetterDollarQuote{ctrl: ctrl}
	mock.recorder = &MockGetterDollarQuoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetterDollarQuote) EXPECT() *MockGetterDollarQuoteMockRecorder {
	return m.recorder
}

// GetDollarQuote mocks base method.
func (m *MockGetterDollarQuote) GetDollarQuote() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDollarQuote")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDollarQuote indicates an expected call of GetDollarQuote.
func (mr *MockGetterDollarQuoteMockRecorder) GetDollarQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDollarQuote", reflect.TypeOf((*MockGetterDollarQuote)(nil).GetDollarQuote))
}
